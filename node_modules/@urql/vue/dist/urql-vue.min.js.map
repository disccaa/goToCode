{"version":3,"file":"urql-vue.min.js","sources":["../src/useClient.ts","../src/useQuery.ts","../src/useMutation.ts","../src/useSubscription.ts","../src/useClientHandle.ts"],"sourcesContent":["import { App, getCurrentInstance, inject, provide, Ref, isRef, ref } from 'vue';\nimport { Client, ClientOptions } from '@urql/core';\n\nexport function provideClient(opts: ClientOptions | Client | Ref<Client>) {\n  let client: Ref<Client>;\n  if (!isRef(opts)) {\n    client = ref(opts instanceof Client ? opts : new Client(opts));\n  } else {\n    client = opts;\n  }\n\n  provide('$urql', client);\n  return client.value;\n}\n\nexport function install(app: App, opts: ClientOptions | Client | Ref<Client>) {\n  let client: Ref<Client>;\n  if (!isRef(opts)) {\n    client = ref(opts instanceof Client ? opts : new Client(opts));\n  } else {\n    client = opts;\n  }\n  app.provide('$urql', client);\n}\n\nexport function useClient(): Ref<Client> {\n  if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n    throw new Error(\n      'use* functions may only be called during the `setup()` or other lifecycle hooks.'\n    );\n  }\n\n  const client = inject('$urql') as Ref<Client>;\n  if (process.env.NODE_ENV !== 'production' && !client) {\n    throw new Error(\n      'No urql Client was provided. Did you forget to install the plugin or call `provideClient` in a parent?'\n    );\n  }\n\n  return client;\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { DocumentNode } from 'graphql';\n\nimport { WatchStopHandle, Ref, ref, watchEffect, reactive, isRef } from 'vue';\n\nimport { Source, pipe, subscribe, onEnd } from 'wonka';\n\nimport {\n  Client,\n  OperationResult,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  RequestPolicy,\n  Operation,\n  createRequest,\n  GraphQLRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\ntype MaybeRef<T> = T | Ref<T>;\n\nexport interface UseQueryArgs<T = any, V = object> {\n  query: MaybeRef<TypedDocumentNode<T, V> | DocumentNode | string>;\n  variables?: MaybeRef<V>;\n  requestPolicy?: MaybeRef<RequestPolicy>;\n  context?: MaybeRef<Partial<OperationContext>>;\n  pause?: MaybeRef<boolean>;\n}\n\nexport type QueryPartialState<T = any, V = object> = Partial<\n  OperationResult<T, V>\n> & { fetching?: boolean };\n\nexport interface UseQueryState<T = any, V = object> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<T | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  isPaused: Ref<boolean>;\n  resume(): void;\n  pause(): void;\n  executeQuery(opts?: Partial<OperationContext>): UseQueryResponse<T, V>;\n}\n\nexport type UseQueryResponse<T, V> = UseQueryState<T, V> &\n  PromiseLike<UseQueryState<T, V>>;\n\nconst watchOptions = {\n  flush: 'pre' as const,\n};\n\nexport function useQuery<T = any, V = object>(\n  args: UseQueryArgs<T, V>\n): UseQueryResponse<T, V> {\n  return callUseQuery(args);\n}\n\nexport function callUseQuery<T = any, V = object>(\n  _args: UseQueryArgs<T, V>,\n  client: Ref<Client> = useClient(),\n  stops: WatchStopHandle[] = []\n): UseQueryResponse<T, V> {\n  const args = reactive(_args);\n\n  const data: Ref<T | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation<T, V> | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  const isPaused: Ref<boolean> = isRef(_args.pause)\n    ? _args.pause\n    : ref(!!_args.pause);\n\n  const request: Ref<GraphQLRequest<T, V>> = ref(\n    createRequest<T, V>(\n      args.query,\n      unwrapPossibleProxy<V>(args.variables as V)\n    ) as any\n  );\n\n  const source: Ref<Source<OperationResult> | undefined> = ref();\n\n  stops.push(\n    watchEffect(() => {\n      const newRequest = createRequest<T, V>(\n        args.query,\n        unwrapPossibleProxy<V>(args.variables as V)\n      );\n      if (request.value.key !== newRequest.key) {\n        request.value = newRequest;\n      }\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(() => {\n      source.value = !isPaused.value\n        ? client.value.executeQuery<T, V>(request.value, {\n            requestPolicy: args.requestPolicy,\n            ...args.context,\n          })\n        : undefined;\n    }, watchOptions)\n  );\n\n  const state: UseQueryState<T, V> = {\n    data,\n    stale,\n    error,\n    operation,\n    extensions,\n    fetching,\n    isPaused,\n    executeQuery(opts?: Partial<OperationContext>): UseQueryResponse<T, V> {\n      const s = (source.value = client.value.executeQuery<T, V>(request.value, {\n        requestPolicy: args.requestPolicy,\n        ...args.context,\n        ...opts,\n      }));\n\n      return {\n        ...response,\n        then(onFulfilled, onRejected) {\n          return new Promise<UseQueryState<T, V>>(resolve => {\n            let hasResult = false;\n            const sub = pipe(\n              s,\n              subscribe(() => {\n                if (!state.fetching.value && !state.stale.value) {\n                  if (sub) sub.unsubscribe();\n                  hasResult = true;\n                  resolve(state);\n                }\n              })\n            );\n            if (hasResult) sub.unsubscribe();\n          }).then(onFulfilled, onRejected);\n        },\n      };\n    },\n    pause() {\n      isPaused.value = true;\n    },\n    resume() {\n      isPaused.value = false;\n    },\n  };\n\n  stops.push(\n    watchEffect(\n      onInvalidate => {\n        if (source.value) {\n          fetching.value = true;\n          stale.value = false;\n\n          onInvalidate(\n            pipe(\n              source.value,\n              onEnd(() => {\n                fetching.value = false;\n                stale.value = false;\n              }),\n              subscribe(res => {\n                data.value = res.data;\n                stale.value = !!res.stale;\n                fetching.value = false;\n                error.value = res.error;\n                operation.value = res.operation;\n                extensions.value = res.extensions;\n              })\n            ).unsubscribe\n          );\n        } else {\n          fetching.value = false;\n          stale.value = false;\n        }\n      },\n      {\n        // NOTE: This part of the query pipeline is only initialised once and will need\n        // to do so synchronously\n        flush: 'sync',\n      }\n    )\n  );\n\n  const response: UseQueryResponse<T, V> = {\n    ...state,\n    then(onFulfilled, onRejected) {\n      const promise = new Promise<UseQueryState<T, V>>(resolve => {\n        if (!source.value) return resolve(state);\n        let hasResult = false;\n        const sub = pipe(\n          source.value,\n          subscribe(() => {\n            if (!state.fetching.value && !state.stale.value) {\n              if (sub) sub.unsubscribe();\n              hasResult = true;\n              resolve(state);\n            }\n          })\n        );\n        if (hasResult) sub.unsubscribe();\n      });\n\n      return promise.then(onFulfilled, onRejected);\n    },\n  };\n\n  return response;\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { ref, Ref } from 'vue';\nimport { DocumentNode } from 'graphql';\nimport { pipe, toPromise, take } from 'wonka';\n\nimport {\n  Client,\n  TypedDocumentNode,\n  CombinedError,\n  Operation,\n  OperationContext,\n  OperationResult,\n  createRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\nexport interface UseMutationState<T, V> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<T | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  executeMutation: (\n    variables: V,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<T>>;\n}\n\nexport type UseMutationResponse<T, V> = UseMutationState<T, V>;\n\nexport function useMutation<T = any, V = any>(\n  query: TypedDocumentNode<T, V> | DocumentNode | string\n): UseMutationResponse<T, V> {\n  return callUseMutation(query);\n}\n\nexport function callUseMutation<T = any, V = any>(\n  query: TypedDocumentNode<T, V> | DocumentNode | string,\n  client: Ref<Client> = useClient()\n): UseMutationResponse<T, V> {\n  const data: Ref<T | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation<T, V> | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  return {\n    data,\n    stale,\n    fetching,\n    error,\n    operation,\n    extensions,\n    executeMutation(\n      variables: V,\n      context?: Partial<OperationContext>\n    ): Promise<OperationResult<T, V>> {\n      fetching.value = true;\n\n      return pipe(\n        client.value.executeMutation<T, V>(\n          createRequest<T, V>(query, unwrapPossibleProxy<V>(variables)),\n          context || {}\n        ),\n        take(1),\n        toPromise\n      ).then((res: OperationResult) => {\n        data.value = res.data;\n        stale.value = !!res.stale;\n        fetching.value = false;\n        error.value = res.error;\n        operation.value = res.operation;\n        extensions.value = res.extensions;\n        return res;\n      });\n    },\n  };\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { DocumentNode } from 'graphql';\nimport { Source, pipe, subscribe, onEnd } from 'wonka';\n\nimport { WatchStopHandle, Ref, ref, watchEffect, reactive, isRef } from 'vue';\n\nimport {\n  Client,\n  OperationResult,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  Operation,\n  createRequest,\n  GraphQLRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\ntype MaybeRef<T> = T | Ref<T>;\n\nexport interface UseSubscriptionArgs<T = any, V = object> {\n  query: MaybeRef<TypedDocumentNode<T, V> | DocumentNode | string>;\n  variables?: MaybeRef<V>;\n  pause?: MaybeRef<boolean>;\n  context?: MaybeRef<Partial<OperationContext>>;\n}\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\nexport type SubscriptionHandlerArg<T, R> = MaybeRef<SubscriptionHandler<T, R>>;\n\nexport interface UseSubscriptionState<T = any, R = T, V = object> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<R | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  isPaused: Ref<boolean>;\n  resume(): void;\n  pause(): void;\n  executeSubscription(opts?: Partial<OperationContext>): void;\n}\n\nexport type UseSubscriptionResponse<\n  T = any,\n  R = T,\n  V = object\n> = UseSubscriptionState<T, R, V>;\n\nconst watchOptions = {\n  flush: 'pre' as const,\n};\n\nexport function useSubscription<T = any, R = T, V = object>(\n  args: UseSubscriptionArgs<T, V>,\n  handler?: SubscriptionHandlerArg<T, R>\n): UseSubscriptionResponse<T, R, V> {\n  return callUseSubscription(args, handler);\n}\n\nexport function callUseSubscription<T = any, R = T, V = object>(\n  _args: UseSubscriptionArgs<T, V>,\n  handler?: SubscriptionHandlerArg<T, R>,\n  client: Ref<Client> = useClient(),\n  stops: WatchStopHandle[] = []\n): UseSubscriptionResponse<T, R, V> {\n  const args = reactive(_args);\n\n  const data: Ref<R | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  const scanHandler: Ref<SubscriptionHandler<T, R> | undefined> = ref(handler);\n\n  const isPaused: Ref<boolean> = isRef(_args.pause)\n    ? _args.pause\n    : ref(!!_args.pause);\n\n  const request: Ref<GraphQLRequest<T, V>> = ref(\n    createRequest<T, V>(\n      args.query,\n      unwrapPossibleProxy<V>(args.variables as V)\n    ) as any\n  );\n\n  const source: Ref<Source<OperationResult<T, V>> | undefined> = ref();\n\n  stops.push(\n    watchEffect(() => {\n      const newRequest = createRequest<T, V>(\n        args.query,\n        unwrapPossibleProxy<V>(args.variables as V)\n      );\n      if (request.value.key !== newRequest.key) {\n        request.value = newRequest;\n      }\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(() => {\n      source.value = !isPaused.value\n        ? client.value.executeSubscription<T, V>(request.value, {\n            ...args.context,\n          })\n        : undefined;\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(onInvalidate => {\n      if (source.value) {\n        fetching.value = true;\n\n        onInvalidate(\n          pipe(\n            source.value,\n            onEnd(() => {\n              fetching.value = false;\n            }),\n            subscribe(result => {\n              fetching.value = true;\n              (data.value =\n                result.data !== undefined\n                  ? typeof scanHandler.value === 'function'\n                    ? scanHandler.value(data.value as any, result.data!)\n                    : result.data\n                  : (result.data as any)),\n                (error.value = result.error);\n              extensions.value = result.extensions;\n              stale.value = !!result.stale;\n              operation.value = result.operation;\n            })\n          ).unsubscribe\n        );\n      } else {\n        fetching.value = false;\n      }\n    }, watchOptions)\n  );\n\n  const state: UseSubscriptionState<T, R, V> = {\n    data,\n    stale,\n    error,\n    operation,\n    extensions,\n    fetching,\n    isPaused,\n    executeSubscription(\n      opts?: Partial<OperationContext>\n    ): UseSubscriptionState<T, R, V> {\n      source.value = client.value.executeSubscription<T, V>(request.value, {\n        ...args.context,\n        ...opts,\n      });\n\n      return state;\n    },\n    pause() {\n      isPaused.value = true;\n    },\n    resume() {\n      isPaused.value = false;\n    },\n  };\n\n  return state;\n}\n","import { DocumentNode } from 'graphql';\nimport { Client, TypedDocumentNode } from '@urql/core';\nimport {\n  WatchStopHandle,\n  getCurrentInstance,\n  onMounted,\n  onBeforeUnmount,\n} from 'vue';\n\nimport { useClient } from './useClient';\n\nimport { callUseQuery, UseQueryArgs, UseQueryResponse } from './useQuery';\n\nimport { callUseMutation, UseMutationResponse } from './useMutation';\n\nimport {\n  callUseSubscription,\n  UseSubscriptionArgs,\n  SubscriptionHandlerArg,\n  UseSubscriptionResponse,\n} from './useSubscription';\n\nexport interface ClientHandle {\n  client: Client;\n\n  useQuery<T = any, V = object>(\n    args: UseQueryArgs<T, V>\n  ): UseQueryResponse<T, V>;\n\n  useSubscription<T = any, R = T, V = object>(\n    args: UseSubscriptionArgs<T, V>,\n    handler?: SubscriptionHandlerArg<T, R>\n  ): UseSubscriptionResponse<T, R, V>;\n\n  useMutation<T = any, V = any>(\n    query: TypedDocumentNode<T, V> | DocumentNode | string\n  ): UseMutationResponse<T, V>;\n}\n\nexport function useClientHandle(): ClientHandle {\n  const client = useClient();\n  const stops: WatchStopHandle[] = [];\n\n  onBeforeUnmount(() => {\n    let stop: WatchStopHandle | void;\n    while ((stop = stops.shift())) stop();\n  });\n\n  const handle: ClientHandle = {\n    client: client.value,\n\n    useQuery<T = any, V = object>(\n      args: UseQueryArgs<T, V>\n    ): UseQueryResponse<T, V> {\n      return callUseQuery(args, client, stops);\n    },\n\n    useSubscription<T = any, R = T, V = object>(\n      args: UseSubscriptionArgs<T, V>,\n      handler?: SubscriptionHandlerArg<T, R>\n    ): UseSubscriptionResponse<T, R, V> {\n      return callUseSubscription(args, handler, client, stops);\n    },\n\n    useMutation<T = any, V = any>(\n      query: TypedDocumentNode<T, V> | DocumentNode | string\n    ): UseMutationResponse<T, V> {\n      return callUseMutation(query, client);\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    onMounted(() => {\n      Object.assign(handle, {\n        useQuery<T = any, V = object>(\n          args: UseQueryArgs<T, V>\n        ): UseQueryResponse<T, V> {\n          if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n            throw new Error(\n              '`handle.useQuery()` should only be called in the `setup()` or a lifecycle hook.'\n            );\n          }\n\n          return callUseQuery(args, client, stops);\n        },\n\n        useSubscription<T = any, R = T, V = object>(\n          args: UseSubscriptionArgs<T, V>,\n          handler?: SubscriptionHandlerArg<T, R>\n        ): UseSubscriptionResponse<T, R, V> {\n          if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n            throw new Error(\n              '`handle.useSubscription()` should only be called in the `setup()` or a lifecycle hook.'\n            );\n          }\n\n          return callUseSubscription(args, handler, client, stops);\n        },\n      });\n    });\n  }\n\n  return handle;\n}\n"],"names":["let","install","app","opts","client","vue","core","Client","provide","inject","const","useQuery","isRef","possibleProxy","value","watchOptions$1","operation","ref","extensions","isPaused","request","createRequest","source","watchEffect","_args","pause","watchOptions","args","query","unwrapPossibleProxy","variables","key","newRequest","state","undefined","executeQuery","_extends","requestPolicy","s","error","fetching","sub","wonka","subscribe","hasResult","unsubscribe","then","onFulfilled","onRejected","data","onInvalidate","stale","res","onEnd","response","flush","useMutation","toPromise","executeMutation","context","handler","callUseSubscription","stops","reactive","scanHandler","push","result","executeSubscription","shift","stop","callUseQuery"],"mappings":"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"}