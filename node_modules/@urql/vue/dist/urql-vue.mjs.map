{"version":3,"file":"urql-vue.mjs","sources":["../src/useClient.ts","../src/utils.ts","../src/useQuery.ts","../src/useMutation.ts","../src/useSubscription.ts","../src/useClientHandle.ts"],"sourcesContent":["import { App, getCurrentInstance, inject, provide, Ref, isRef, ref } from 'vue';\nimport { Client, ClientOptions } from '@urql/core';\n\nexport function provideClient(opts: ClientOptions | Client | Ref<Client>) {\n  let client: Ref<Client>;\n  if (!isRef(opts)) {\n    client = ref(opts instanceof Client ? opts : new Client(opts));\n  } else {\n    client = opts;\n  }\n\n  provide('$urql', client);\n  return client.value;\n}\n\nexport function install(app: App, opts: ClientOptions | Client | Ref<Client>) {\n  let client: Ref<Client>;\n  if (!isRef(opts)) {\n    client = ref(opts instanceof Client ? opts : new Client(opts));\n  } else {\n    client = opts;\n  }\n  app.provide('$urql', client);\n}\n\nexport function useClient(): Ref<Client> {\n  if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n    throw new Error(\n      'use* functions may only be called during the `setup()` or other lifecycle hooks.'\n    );\n  }\n\n  const client = inject('$urql') as Ref<Client>;\n  if (process.env.NODE_ENV !== 'production' && !client) {\n    throw new Error(\n      'No urql Client was provided. Did you forget to install the plugin or call `provideClient` in a parent?'\n    );\n  }\n\n  return client;\n}\n","import { Ref, isRef } from 'vue';\n\nexport function unwrapPossibleProxy<V>(\n  possibleProxy: V | Ref<V> | undefined\n): V | undefined {\n  return possibleProxy && isRef(possibleProxy)\n    ? possibleProxy.value\n    : possibleProxy;\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { DocumentNode } from 'graphql';\n\nimport { WatchStopHandle, Ref, ref, watchEffect, reactive, isRef } from 'vue';\n\nimport { Source, pipe, subscribe, onEnd } from 'wonka';\n\nimport {\n  Client,\n  OperationResult,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  RequestPolicy,\n  Operation,\n  createRequest,\n  GraphQLRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\ntype MaybeRef<T> = T | Ref<T>;\n\nexport interface UseQueryArgs<T = any, V = object> {\n  query: MaybeRef<TypedDocumentNode<T, V> | DocumentNode | string>;\n  variables?: MaybeRef<V>;\n  requestPolicy?: MaybeRef<RequestPolicy>;\n  context?: MaybeRef<Partial<OperationContext>>;\n  pause?: MaybeRef<boolean>;\n}\n\nexport type QueryPartialState<T = any, V = object> = Partial<\n  OperationResult<T, V>\n> & { fetching?: boolean };\n\nexport interface UseQueryState<T = any, V = object> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<T | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  isPaused: Ref<boolean>;\n  resume(): void;\n  pause(): void;\n  executeQuery(opts?: Partial<OperationContext>): UseQueryResponse<T, V>;\n}\n\nexport type UseQueryResponse<T, V> = UseQueryState<T, V> &\n  PromiseLike<UseQueryState<T, V>>;\n\nconst watchOptions = {\n  flush: 'pre' as const,\n};\n\nexport function useQuery<T = any, V = object>(\n  args: UseQueryArgs<T, V>\n): UseQueryResponse<T, V> {\n  return callUseQuery(args);\n}\n\nexport function callUseQuery<T = any, V = object>(\n  _args: UseQueryArgs<T, V>,\n  client: Ref<Client> = useClient(),\n  stops: WatchStopHandle[] = []\n): UseQueryResponse<T, V> {\n  const args = reactive(_args);\n\n  const data: Ref<T | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation<T, V> | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  const isPaused: Ref<boolean> = isRef(_args.pause)\n    ? _args.pause\n    : ref(!!_args.pause);\n\n  const request: Ref<GraphQLRequest<T, V>> = ref(\n    createRequest<T, V>(\n      args.query,\n      unwrapPossibleProxy<V>(args.variables as V)\n    ) as any\n  );\n\n  const source: Ref<Source<OperationResult> | undefined> = ref();\n\n  stops.push(\n    watchEffect(() => {\n      const newRequest = createRequest<T, V>(\n        args.query,\n        unwrapPossibleProxy<V>(args.variables as V)\n      );\n      if (request.value.key !== newRequest.key) {\n        request.value = newRequest;\n      }\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(() => {\n      source.value = !isPaused.value\n        ? client.value.executeQuery<T, V>(request.value, {\n            requestPolicy: args.requestPolicy,\n            ...args.context,\n          })\n        : undefined;\n    }, watchOptions)\n  );\n\n  const state: UseQueryState<T, V> = {\n    data,\n    stale,\n    error,\n    operation,\n    extensions,\n    fetching,\n    isPaused,\n    executeQuery(opts?: Partial<OperationContext>): UseQueryResponse<T, V> {\n      const s = (source.value = client.value.executeQuery<T, V>(request.value, {\n        requestPolicy: args.requestPolicy,\n        ...args.context,\n        ...opts,\n      }));\n\n      return {\n        ...response,\n        then(onFulfilled, onRejected) {\n          return new Promise<UseQueryState<T, V>>(resolve => {\n            let hasResult = false;\n            const sub = pipe(\n              s,\n              subscribe(() => {\n                if (!state.fetching.value && !state.stale.value) {\n                  if (sub) sub.unsubscribe();\n                  hasResult = true;\n                  resolve(state);\n                }\n              })\n            );\n            if (hasResult) sub.unsubscribe();\n          }).then(onFulfilled, onRejected);\n        },\n      };\n    },\n    pause() {\n      isPaused.value = true;\n    },\n    resume() {\n      isPaused.value = false;\n    },\n  };\n\n  stops.push(\n    watchEffect(\n      onInvalidate => {\n        if (source.value) {\n          fetching.value = true;\n          stale.value = false;\n\n          onInvalidate(\n            pipe(\n              source.value,\n              onEnd(() => {\n                fetching.value = false;\n                stale.value = false;\n              }),\n              subscribe(res => {\n                data.value = res.data;\n                stale.value = !!res.stale;\n                fetching.value = false;\n                error.value = res.error;\n                operation.value = res.operation;\n                extensions.value = res.extensions;\n              })\n            ).unsubscribe\n          );\n        } else {\n          fetching.value = false;\n          stale.value = false;\n        }\n      },\n      {\n        // NOTE: This part of the query pipeline is only initialised once and will need\n        // to do so synchronously\n        flush: 'sync',\n      }\n    )\n  );\n\n  const response: UseQueryResponse<T, V> = {\n    ...state,\n    then(onFulfilled, onRejected) {\n      const promise = new Promise<UseQueryState<T, V>>(resolve => {\n        if (!source.value) return resolve(state);\n        let hasResult = false;\n        const sub = pipe(\n          source.value,\n          subscribe(() => {\n            if (!state.fetching.value && !state.stale.value) {\n              if (sub) sub.unsubscribe();\n              hasResult = true;\n              resolve(state);\n            }\n          })\n        );\n        if (hasResult) sub.unsubscribe();\n      });\n\n      return promise.then(onFulfilled, onRejected);\n    },\n  };\n\n  return response;\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { ref, Ref } from 'vue';\nimport { DocumentNode } from 'graphql';\nimport { pipe, toPromise, take } from 'wonka';\n\nimport {\n  Client,\n  TypedDocumentNode,\n  CombinedError,\n  Operation,\n  OperationContext,\n  OperationResult,\n  createRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\nexport interface UseMutationState<T, V> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<T | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  executeMutation: (\n    variables: V,\n    context?: Partial<OperationContext>\n  ) => Promise<OperationResult<T>>;\n}\n\nexport type UseMutationResponse<T, V> = UseMutationState<T, V>;\n\nexport function useMutation<T = any, V = any>(\n  query: TypedDocumentNode<T, V> | DocumentNode | string\n): UseMutationResponse<T, V> {\n  return callUseMutation(query);\n}\n\nexport function callUseMutation<T = any, V = any>(\n  query: TypedDocumentNode<T, V> | DocumentNode | string,\n  client: Ref<Client> = useClient()\n): UseMutationResponse<T, V> {\n  const data: Ref<T | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation<T, V> | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  return {\n    data,\n    stale,\n    fetching,\n    error,\n    operation,\n    extensions,\n    executeMutation(\n      variables: V,\n      context?: Partial<OperationContext>\n    ): Promise<OperationResult<T, V>> {\n      fetching.value = true;\n\n      return pipe(\n        client.value.executeMutation<T, V>(\n          createRequest<T, V>(query, unwrapPossibleProxy<V>(variables)),\n          context || {}\n        ),\n        take(1),\n        toPromise\n      ).then((res: OperationResult) => {\n        data.value = res.data;\n        stale.value = !!res.stale;\n        fetching.value = false;\n        error.value = res.error;\n        operation.value = res.operation;\n        extensions.value = res.extensions;\n        return res;\n      });\n    },\n  };\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\n\nimport { DocumentNode } from 'graphql';\nimport { Source, pipe, subscribe, onEnd } from 'wonka';\n\nimport { WatchStopHandle, Ref, ref, watchEffect, reactive, isRef } from 'vue';\n\nimport {\n  Client,\n  OperationResult,\n  TypedDocumentNode,\n  CombinedError,\n  OperationContext,\n  Operation,\n  createRequest,\n  GraphQLRequest,\n} from '@urql/core';\n\nimport { useClient } from './useClient';\nimport { unwrapPossibleProxy } from './utils';\n\ntype MaybeRef<T> = T | Ref<T>;\n\nexport interface UseSubscriptionArgs<T = any, V = object> {\n  query: MaybeRef<TypedDocumentNode<T, V> | DocumentNode | string>;\n  variables?: MaybeRef<V>;\n  pause?: MaybeRef<boolean>;\n  context?: MaybeRef<Partial<OperationContext>>;\n}\n\nexport type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;\nexport type SubscriptionHandlerArg<T, R> = MaybeRef<SubscriptionHandler<T, R>>;\n\nexport interface UseSubscriptionState<T = any, R = T, V = object> {\n  fetching: Ref<boolean>;\n  stale: Ref<boolean>;\n  data: Ref<R | undefined>;\n  error: Ref<CombinedError | undefined>;\n  extensions: Ref<Record<string, any> | undefined>;\n  operation: Ref<Operation<T, V> | undefined>;\n  isPaused: Ref<boolean>;\n  resume(): void;\n  pause(): void;\n  executeSubscription(opts?: Partial<OperationContext>): void;\n}\n\nexport type UseSubscriptionResponse<\n  T = any,\n  R = T,\n  V = object\n> = UseSubscriptionState<T, R, V>;\n\nconst watchOptions = {\n  flush: 'pre' as const,\n};\n\nexport function useSubscription<T = any, R = T, V = object>(\n  args: UseSubscriptionArgs<T, V>,\n  handler?: SubscriptionHandlerArg<T, R>\n): UseSubscriptionResponse<T, R, V> {\n  return callUseSubscription(args, handler);\n}\n\nexport function callUseSubscription<T = any, R = T, V = object>(\n  _args: UseSubscriptionArgs<T, V>,\n  handler?: SubscriptionHandlerArg<T, R>,\n  client: Ref<Client> = useClient(),\n  stops: WatchStopHandle[] = []\n): UseSubscriptionResponse<T, R, V> {\n  const args = reactive(_args);\n\n  const data: Ref<R | undefined> = ref();\n  const stale: Ref<boolean> = ref(false);\n  const fetching: Ref<boolean> = ref(false);\n  const error: Ref<CombinedError | undefined> = ref();\n  const operation: Ref<Operation | undefined> = ref();\n  const extensions: Ref<Record<string, any> | undefined> = ref();\n\n  const scanHandler: Ref<SubscriptionHandler<T, R> | undefined> = ref(handler);\n\n  const isPaused: Ref<boolean> = isRef(_args.pause)\n    ? _args.pause\n    : ref(!!_args.pause);\n\n  const request: Ref<GraphQLRequest<T, V>> = ref(\n    createRequest<T, V>(\n      args.query,\n      unwrapPossibleProxy<V>(args.variables as V)\n    ) as any\n  );\n\n  const source: Ref<Source<OperationResult<T, V>> | undefined> = ref();\n\n  stops.push(\n    watchEffect(() => {\n      const newRequest = createRequest<T, V>(\n        args.query,\n        unwrapPossibleProxy<V>(args.variables as V)\n      );\n      if (request.value.key !== newRequest.key) {\n        request.value = newRequest;\n      }\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(() => {\n      source.value = !isPaused.value\n        ? client.value.executeSubscription<T, V>(request.value, {\n            ...args.context,\n          })\n        : undefined;\n    }, watchOptions)\n  );\n\n  stops.push(\n    watchEffect(onInvalidate => {\n      if (source.value) {\n        fetching.value = true;\n\n        onInvalidate(\n          pipe(\n            source.value,\n            onEnd(() => {\n              fetching.value = false;\n            }),\n            subscribe(result => {\n              fetching.value = true;\n              (data.value =\n                result.data !== undefined\n                  ? typeof scanHandler.value === 'function'\n                    ? scanHandler.value(data.value as any, result.data!)\n                    : result.data\n                  : (result.data as any)),\n                (error.value = result.error);\n              extensions.value = result.extensions;\n              stale.value = !!result.stale;\n              operation.value = result.operation;\n            })\n          ).unsubscribe\n        );\n      } else {\n        fetching.value = false;\n      }\n    }, watchOptions)\n  );\n\n  const state: UseSubscriptionState<T, R, V> = {\n    data,\n    stale,\n    error,\n    operation,\n    extensions,\n    fetching,\n    isPaused,\n    executeSubscription(\n      opts?: Partial<OperationContext>\n    ): UseSubscriptionState<T, R, V> {\n      source.value = client.value.executeSubscription<T, V>(request.value, {\n        ...args.context,\n        ...opts,\n      });\n\n      return state;\n    },\n    pause() {\n      isPaused.value = true;\n    },\n    resume() {\n      isPaused.value = false;\n    },\n  };\n\n  return state;\n}\n","import { DocumentNode } from 'graphql';\nimport { Client, TypedDocumentNode } from '@urql/core';\nimport {\n  WatchStopHandle,\n  getCurrentInstance,\n  onMounted,\n  onBeforeUnmount,\n} from 'vue';\n\nimport { useClient } from './useClient';\n\nimport { callUseQuery, UseQueryArgs, UseQueryResponse } from './useQuery';\n\nimport { callUseMutation, UseMutationResponse } from './useMutation';\n\nimport {\n  callUseSubscription,\n  UseSubscriptionArgs,\n  SubscriptionHandlerArg,\n  UseSubscriptionResponse,\n} from './useSubscription';\n\nexport interface ClientHandle {\n  client: Client;\n\n  useQuery<T = any, V = object>(\n    args: UseQueryArgs<T, V>\n  ): UseQueryResponse<T, V>;\n\n  useSubscription<T = any, R = T, V = object>(\n    args: UseSubscriptionArgs<T, V>,\n    handler?: SubscriptionHandlerArg<T, R>\n  ): UseSubscriptionResponse<T, R, V>;\n\n  useMutation<T = any, V = any>(\n    query: TypedDocumentNode<T, V> | DocumentNode | string\n  ): UseMutationResponse<T, V>;\n}\n\nexport function useClientHandle(): ClientHandle {\n  const client = useClient();\n  const stops: WatchStopHandle[] = [];\n\n  onBeforeUnmount(() => {\n    let stop: WatchStopHandle | void;\n    while ((stop = stops.shift())) stop();\n  });\n\n  const handle: ClientHandle = {\n    client: client.value,\n\n    useQuery<T = any, V = object>(\n      args: UseQueryArgs<T, V>\n    ): UseQueryResponse<T, V> {\n      return callUseQuery(args, client, stops);\n    },\n\n    useSubscription<T = any, R = T, V = object>(\n      args: UseSubscriptionArgs<T, V>,\n      handler?: SubscriptionHandlerArg<T, R>\n    ): UseSubscriptionResponse<T, R, V> {\n      return callUseSubscription(args, handler, client, stops);\n    },\n\n    useMutation<T = any, V = any>(\n      query: TypedDocumentNode<T, V> | DocumentNode | string\n    ): UseMutationResponse<T, V> {\n      return callUseMutation(query, client);\n    },\n  };\n\n  if (process.env.NODE_ENV !== 'production') {\n    onMounted(() => {\n      Object.assign(handle, {\n        useQuery<T = any, V = object>(\n          args: UseQueryArgs<T, V>\n        ): UseQueryResponse<T, V> {\n          if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n            throw new Error(\n              '`handle.useQuery()` should only be called in the `setup()` or a lifecycle hook.'\n            );\n          }\n\n          return callUseQuery(args, client, stops);\n        },\n\n        useSubscription<T = any, R = T, V = object>(\n          args: UseSubscriptionArgs<T, V>,\n          handler?: SubscriptionHandlerArg<T, R>\n        ): UseSubscriptionResponse<T, R, V> {\n          if (process.env.NODE_ENV !== 'production' && !getCurrentInstance()) {\n            throw new Error(\n              '`handle.useSubscription()` should only be called in the `setup()` or a lifecycle hook.'\n            );\n          }\n\n          return callUseSubscription(args, handler, client, stops);\n        },\n      });\n    });\n  }\n\n  return handle;\n}\n"],"names":["provideClient","opts","let","client","isRef","ref","Client","provide","app","process","env","NODE_ENV","getCurrentInstance","unwrapPossibleProxy","possibleProxy","const","useQuery","callUseQuery","args","data","stale","fetching","stops","error","operation","extensions","isPaused","request","source","watchEffect","_args","pause","query","push","newRequest","createRequest","variables","key","value","watchOptions","executeQuery","_extends","requestPolicy","context","undefined","Promise","then","onRejected","hasResult","subscribe","onInvalidate","res","onEnd","unsubscribe","response","resolve","state","onFulfilled","useMutation","callUseMutation","toPromise","executeMutation","callUseSubscription","scanHandler","handler","executeSubscription","result","useClient","useClientHandle","handle","stop","shift","useSubscription","onMounted","Error"],"mappings":"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"}